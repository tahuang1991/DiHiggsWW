[CRAB]
#
#   This section contains the default values for general parameters.
#   They can be set also as a command-line option, i.e.
#
#   key1 = value1
#   [SECTION]
#   key2 = value2
#
#   in this section corresponds to
#
#   crab.py -key1=value1 -key2=SECTION.value2
#
#   in the command line.
#
jobtype = cmssw

### test cvs
### Specify the scheduler to be used.
### Supported schedulers are : [ glite, glidein, condor_g, caf, condor, arc, sge, pbs, lsf ]
scheduler = glite

### To configure CRAB as client. Let CRAB select one of the available servers for you
### CRAB will submit jobs to an available server, which will submit and manage for the users
#use_server = 1

### Only to debug propose, configure CRAB  as client and set the name of the server
### (e.g. pi, lnl etc etc )
### CRAB will submit jobs to the server, which will submit and manage for the users
#server_name = cnaf

[CMSSW]

### The data you want to access (to be found on DBS)
### /primarydataset/processeddataset/datatier[/OptionalADS]
#datasetpath=/ttbar_inclusive_TopRex/CMSSW_1_3_1-Spring07-1122/GEN-SIM-DIGI-RECO

### Within a dataset you can ask to run over the related parent files too.
### E.g., this will give you access to the RAW data while running over a RECO sample.
### Setting use_parent=True CRAB determines the parent files from DBS and will add
### secondaryFileNames = cms.untracked.vstring( <LIST of parent FIles> ) to the pool source section of your parameter set.
#use_parent = True

### To run CRAB for private events production set datasetPath= None
datasetpath=none

### To select a single (list of) run within a single processed dataset define run number (list)
### selection can be a comma-separated list of run numbers and run number ranges: 1,2,3-4
#runselection=1,2,3-4


### Specifies a comma separated list of seeds to increment from job to job. The initial value is taken from the CMSSW config file.
### increment_seeds=sourceSeed,g4SimHits will set sourceSeed=11,12,13 and g4SimHits=21,22,23 on subsequent jobs if the values of
### the two seeds are 10 and 20 in the CMSSW config file.
### See also preserve_seeds. Seeds not listed in increment_seeds or preserve_seeds are randomly set for each job.
#increment_seeds=sourceSeed,g4SimHits

### Specifies a comma separated list of seeds to which CRAB will not change from their values in the user CMSSW config file.
### preserve_seeds=sourceSeed,g4SimHits will leave the Pythia and GEANT seeds the same for every job.
### See also increment_seeds. Seeds not listed in increment_seeds or preserve_seeds are randomly set for each job.
#preserve_seeds=sourceSeed,g4SimHits

### Relevant only for Monte Carlo production, defaults to 1. The first job will generate events with this run number, subsequent jobs will
### increment the run number. Failing to set this number means CMSSW will not be able to read multiple such files as they
### will all have the same run and event numbers. This check in CMSSW can be bypassed by setting
### process.source.duplicateCheckMode = cms.untracked.string('noDuplicateCheck') in the input source, should you need to
### read files produced without setting first_run.

#first_run=1

### Name of the generator your MC job is using. Some generators require CRAB to skip events, others do not.
### Possible values are pythia (default), comphep, lhe, and madgraph. This will skip events in your generator input file.
#generator=pythia

### Force CRAB to skip the inclusion of file produced by TFileService to list of output files.
### Default is 0, namely the file is included.
# skip_TFileService_output = 1

### Force CRAB to add the EDM output file, as defined in PSET in PoolOutputModule (if any)
### to be added to the list of output files. Default is 0 (== no inclusion)
# get_edm_output = 1


### To use a local DBS istance specify the related URL here.
# dbs_url = http://cmsdoc.cern.ch/cms/test/aprom/DBS/CGIServer/prodquery

### The name of ParameterSet to be used
pset=pythia.py

### Parameters to be passed to the python config file, see
### https://twiki.cern.ch/twiki/bin/view/CMS/SWGuideAboutPythonConfigFile#Passing_Command_Line_Arguments_T
#pycfg_params = option1=one option2=two

### A JSON file that describes which runs and lumis to process. CRAB will skip luminosity blocks not
### listed in the file. When using this setting, you must also use lumi-based splitting rather than
### event based splitting as shown below.
#lumi_mask = some_mask_file.json

### Splitting parameters:
### Total number of events to be accessed: -1 means all
### NOTE: "-1" is not usable if no input
total_number_of_events=10

### Number of events to be processed per job
#events_per_job = 1000

### Number of jobs to be created per task
number_of_jobs = 5

### Analogous to events, lumis can be used to split up datasets
#total_number_of_lumis=1000
#lumis_per_job = 100


### The output files produced by your application (comma separated list)
output_file = mcpool.root

### Dataset of PU to import in the local DBS for data publication
#dataset_pu = /pileup/dataset/toimport

# This setting is for experts only. See crab -help
# split_by_event = 1

[USER]

### If CRAB.server_mode = 1
### To set Your e-mail address to be used by the server to notify you
#eMail = your_email_address

### If CRAB.server_mode = 1
### To specify the percentage of finished job in a task, corresponding
### to when the notification email will be sent to you by the server default is 100%
#thresholdLevel = 100

### To use a specific name of UI directory where CRAB will create job to submit (with full path).
### the default directory will be "crab_0_data_time"
#ui_working_dir = /full/path/Name_of_Directory

### OUTPUT file management ###
### To have back the job executable output into UI set return_data= 1
return_data = 1

### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
#outputdir= /full/path/yourOutDir

### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir


### To copy the CMS executable output into a SE set copy_data = 1
copy_data = 0

### if you want to copy data in a "official CMS site" (PhEDEx node)
### you have to specify the name as written in
#storage_element = T2_IT_Bari
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want


### if you want to copy your data at CAF
#storage_element = T2_CH_CAF
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want

### at caf, you can decide in which mountpoint to copy your output, selecting the first part of LFN
### default value is /store/caf/user
### to test eos area you can use 
#caf_lfn = /store/eos/user

### if you want to copy your data to your area in castor at cern
### or in a "not official CMS site" you have to specify the complete name of SE
#storage_element=srm-cms.cern.ch
### this directory is the mountpoin of SE
#storage_path=/srm/managerv2?SFN=/castor/cern.ch/
### directory or tree of directory under the mounpoint
#user_remote_dir = name_directory_you_want

################ DEPRECATED WITH EOS ########################
### if you are using CAF scheduler, you can specify the pool
### where to write your output. The default is cmscafuser
#storage_pool = cmscafuser
############################################################

### This is the storage port number. Default is 8443
#storage_port = N

### To use the local stage out (local to the closeSE) in case of remote stage out failure.
### The publication of data is not supported with local_stage_out = 1. Work in progress
local_stage_out= 0

### To publish produced output in a local istance of DBS set publish_data = 1
publish_data=0

### Specify the dataset name. The full path will be <primarydataset>/<publish_data_name>/USER
#publish_data_name = yourDataName
### Specify the URL of DBS istance where CRAB has to publish the output files
#dbs_url_for_publication = http://cmssrv17.fnal.gov:8989/DBS108LOC1/servlet/DBSServlet


### To specify additional files to be put in InputSandBox
### write the full path  if the files are not in the current directory
### (wildcard * are allowed): comma separated list
#additional_input_files = file1, file2, /full/path/file3

### A user script that will be run on WN (instead of default cmsrun). It is up to the user to setup properly the script itself to
### run on WN enviroment. CRAB guarantees that the CMSSW environment is setup (e.g. scram is in the path) and that the modified
### pset.py will be placed in the working directory, with name CMSSW.py . The user must ensure that a job report named
### crab_fjr.xml will be written. This can be guaranteed by passing the arguments "-j crab_fjr.xml" to cmsRun in the script. The
### script itself will be added automatically to the input sandbox so user MUST NOT add it within the USER.additional_input_files.
#script_exe=file_exe

### To switch from status print on screen to DB serialization to a file specify here the destination files.
### CRAB will create it on CRAB_Working_Dir/share
#xml_report=name_you_want

### To use the automate namespace definition (perfomed by CRAB). Default is 0
### The same policy used for the stage out in case of data publication will be applied.
#usenamespace=1

### To enable the higer verbose level on wrapper specify debug_wrapper = 1.
### The Pset contents before and after the CRAB manipulation will be written
### together with other useful infos.
#debug_wrapper = 1

### Set it to 1 to skip the check of free space left on your working directory
### before attempting to get the output back. Default is 0 (=False)
#dontCheckSpaceLeft = 1

### This is the value of the activity reported in the dashboard (release: client 2_7_8 and server 1_1_4).
### Default value is analysis
#tasktype = what_you_want  

[GRID]

### Only with debug propose: to change the CMS-WMS to be used.
### By default CRAB takes the needed configuration files from the cmsdoc page
#rb = CERN

### To specify  VOMS role and/or group
#role = superman
#group = superheros

### To skip the CRAB check of your proxy
#dont_check_proxy = 1

### To add other requirements to jdl file, as example the Operating System
#requirements = (other.GlueHostOperatingSystemName == "RedHat")

### To add other parameters to jdl file: semicolon separated list;
#additional_jdl_parameters = AllowZippedISB = false

### To use a specific WMS end point put here the right name:
#wms_service=

### To specify a cpu time and wall_clock_time(=real time) in minutes
#max_cpu_time = 60
#max_wall_clock_time = 60

### To manage White/Black lists
### Use the dns domain (eg fnal, cern, ifae, fzk, cnaf, lnl,....) or the CMSSite name
### T1_US_FNAL. Only Tier2 centers have resources dedicated to user analysis.
### All the storage/computing elements (SE/CE) contained in the strings (comma separated list)
### will/will not be considered for submission.
### SE Black List:
se_black_list = T0,T1
### SE White List
#se_white_list = infn

### CE Black List:
#ce_black_list = infn
### CE White List:
#ce_white_list = infn

## fields written into jdl
virtual_organization = cms

### Temporary useful parameter to allow the WMSAuthorisation handling. Specifying skipwmsauth = 1
### the pyopenssl problems will disappear. It is needed working on gLite UI outside of CERN.
#skipwmsauth=1


[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

